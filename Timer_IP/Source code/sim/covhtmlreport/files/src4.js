var g_data = {"name":"../rtl/timer_apb_if.v","src":"module timer_apb_if (\r\n    // System signals\r\n    input  wire         clk,\r\n    input  wire         rst_n,\r\n    \r\n    // APB slave interface\r\n    input  wire         psel,\r\n    input  wire         pwrite,\r\n    input  wire         penable,\r\n    input  wire [12:0]  paddr,\r\n    input  wire [31:0]  pwdata,\r\n    input  wire [3:0]   pstrb,\r\n    output wire [31:0]  prdata,\r\n    output wire         pready,\r\n    output wire         pslverr,\r\n\r\n    // Register interface\r\n    output wire         wr_en,\r\n    output wire         rd_en,\r\n    output reg  [12:0]  reg_addr,\r\n    output reg  [31:0]  reg_wdata,\r\n    output reg  [3:0]   reg_wstrb,\r\n    input  wire [31:0]  reg_rdata,\r\n    input  wire         reg_error\r\n);\r\n\r\n    // FSM State Definition\r\n    localparam IDLE   = 2'b00;\r\n    localparam SETUP  = 2'b01; \r\n    localparam ACCESS = 2'b10;\r\n\r\n    // Internal registers\r\n    reg [1:0] current_state, next_state;\r\n\r\n    // State machine sequential logic\r\n    always @(posedge clk or negedge rst_n) begin\r\n        if (!rst_n) begin\r\n            current_state <= IDLE;\r\n            reg_addr <= 12'h0;\r\n            reg_wdata <= 32'h0;\r\n            reg_wstrb <= 4'h0;\r\n        end else begin\r\n            current_state <= next_state;\r\n            \r\n            // Register address and data in SETUP state\r\n            if (current_state == SETUP) begin\r\n                reg_addr <= paddr;\r\n                reg_wdata <= pwdata;\r\n                reg_wstrb <= pstrb;\r\n            end\r\n        end\r\n    end\r\n\r\n    // Next state logic\r\n    always @(*) begin\r\n        case (current_state)\r\n            IDLE: begin\r\n                if (psel && !penable) \r\n                    next_state = SETUP;\r\n                else\r\n                    next_state = IDLE;\r\n            end\r\n            \r\n            SETUP: begin\r\n                if (psel && penable)\r\n                    next_state = ACCESS;\r\n                else if (!psel)\r\n                    next_state = IDLE;\r\n            end\r\n\r\n            ACCESS: begin\r\n                // Always exit ACCESS after one cycle\r\n                if (psel && !penable)\r\n                    next_state = SETUP;  // Start new transaction\r\n                else\r\n                    next_state = IDLE;   // No new transaction\r\n            end\r\n            \r\n            default: begin\r\n                next_state = IDLE;\r\n            end\r\n        endcase\r\n    end\r\n\r\n    // Combinational output logic\r\n    assign wr_en = (current_state == ACCESS) ? pwrite : 1'b0;\r\n    assign rd_en = (current_state == ACCESS) ? !pwrite : 1'b0;\r\n    assign pready = (current_state == ACCESS);\r\n    assign pslverr = pready ? reg_error : 1'b0;\r\n    assign prdata = rd_en ? reg_rdata : 32'h0;\r\n\r\nendmodule\r\n","lang":"verilog"};
processSrcData(g_data);